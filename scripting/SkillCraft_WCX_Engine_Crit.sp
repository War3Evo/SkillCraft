/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include "SkillCraft_Includes/SkillCraft_Interface"

public Plugin:myinfo = 
{
	name = "SkillCraft WCX - Crit/Damage Engine",
	author = "SkillCraft Team",
	description = "WCX Critical strike and extra damage engine",
	version = "0.1",
}

public OnPluginStart()
{
	
}

public On_SC_EventPostHurt(victim,attacker,damage,const String:weapon[32],bool:isWarcraft)
{
	if((victim == attacker) || (!ValidPlayer(victim) || !ValidPlayer(attacker)) || (GetClientTeam(victim) == GetClientTeam(attacker)))
	{
		return;
	}
	//decl String:weapon[64];
	//GetEventString(SC_GetVar(SmEvent),"weapon",weapon,sizeof(weapon)); 
	if(StrEqual(weapon, "crit",false) || StrEqual(weapon, "bash", false) || StrEqual(weapon, "weapon_crit",false) || StrEqual(weapon, "weapon_bash", false))
		return;
	
	new Float:CritChance = SC_GetBuffSumFloat(attacker, fCritChance);
	new Float:CritMultiplier = SC_GetBuffSumFloat(attacker,fCritModifier);
	new CritMode = SC_GetBuffLastValue(attacker, iCritMode);
	new DamageMode = SC_GetBuffLastValue(attacker, iDamageMode);
	new Float:DamageMultiplier = SC_GetBuffSumFloat(attacker, fDamageModifier);
	new BonusDamage = SC_GetBuffSumInt(attacker,iDamageBonus);
	
	new Float:PercentIncrease = 0.0;
	new DamageIncrease = 0;
	
	if((DamageMultiplier > 0.0) ||(BonusDamage > 0) || (DamageMode > 0))
	{
		switch(DamageMode)
		{
			//1 (all damage qualifies for damage increase)
			case(1):{
				PercentIncrease += DamageMultiplier;
				DamageIncrease = BonusDamage;
			}
			//2 (bullet damage damage increase)
			case(2):{
				if(!SC_IsDamageFromMelee(weapon) && !StrEqual(weapon,"hegrenade",false))
				{
					PercentIncrease += DamageMultiplier;
					DamageIncrease = BonusDamage;
				}
			}
			//3 (grenade damage damage increase) 
			case(3):{
				if(StrEqual(weapon,"hegrenade",false))
				{
					PercentIncrease += DamageMultiplier;
					DamageIncrease = BonusDamage;
				}
			}
			//4 (melee damage damage increase)
			case(4):{
				if(SC_IsDamageFromMelee(weapon))
				{
					PercentIncrease += DamageMultiplier;
					DamageIncrease = BonusDamage;
				}
			}
			//5 (melee and bullet damage increase)
			case(5):{
				if(!StrEqual(weapon,"hegrenade",false))
				{
					PercentIncrease += DamageMultiplier;
					DamageIncrease = BonusDamage;
				}
			}
			//6 (melee and grenade damage increase) 
			case(6):{
				if(StrEqual(weapon,"hegrenade",false)||SC_IsDamageFromMelee(weapon))
				{
					PercentIncrease += DamageMultiplier;
					DamageIncrease = BonusDamage;
				}
			}
			//7 (bullet and grenade damage increase)
			case(7):{
				if(StrEqual(weapon,"hegrenade",false)||!SC_IsDamageFromMelee(weapon))
				{
					PercentIncrease += DamageMultiplier;
					DamageIncrease = BonusDamage;
				}
			}
		}
	}
	if(CritChance > 0.0 || CritMode > 0)
	{
		if(SC_Chance(CritChance))
		{
			switch(CritMode)
			{
				//1 (all damage qualifies for damage increase)
				case(1):{
					CritMultiplier += DamageMultiplier;
				}
				//2 (bullet damage damage increase)
				case(2):{
					if(!SC_IsDamageFromMelee(weapon) && !StrEqual(weapon,"hegrenade",false))
						CritMultiplier += DamageMultiplier;
				}
				//3 (grenade damage damage increase) 
				case(3):{
					if(StrEqual(weapon,"hegrenade",false))
						CritMultiplier += DamageMultiplier;
				}
				//4 (melee damage damage increase)
				case(4):{
					if(SC_IsDamageFromMelee(weapon))
						CritMultiplier += DamageMultiplier;
				}
				//5 (melee and bullet damage increase)
				case(5):{
					if(!StrEqual(weapon,"hegrenade",false))
						CritMultiplier += DamageMultiplier;
				}
				//6 (melee and grenade damage increase) 
				case(6):{
					if(StrEqual(weapon,"hegrenade",false)||SC_IsDamageFromMelee(weapon))
						CritMultiplier += DamageMultiplier;
				}
				//7 (bullet and grenade damage increase)
				case(7):{
					if(StrEqual(weapon,"hegrenade",false)||!SC_IsDamageFromMelee(weapon))
						CritMultiplier += DamageMultiplier;
				}
			}
		}
	}
	new newdamage = RoundToFloor(PercentIncrease * damage);
	newdamage = newdamage + DamageIncrease;
	if(newdamage > 0)
		SC_DealDamage(victim,newdamage,attacker,_,"weapon_crit");
	
}

