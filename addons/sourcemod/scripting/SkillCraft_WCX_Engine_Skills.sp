/* Plugin Template generated by Pawn Studio */

#include <sourcemod>
#include "SkillCraft_Includes/SkillCraft_Interface"

#pragma semicolon 1

//new String:explosionSound1[]="war3source/particle_suck1.wav";

new String:explosionSound1[256];


#define MAXWARDS 64*4 //on map LOL
#define WARDBELOW -2.0 // player is 60 units tall about (6 feet)
#define WARDABOVE 160.0

new BeamSprite;
new HaloSprite;

new ExplosionModel;
new SuicidedAsTeam[MAXPLAYERSCUSTOM];
new Float:SuicideLocation[MAXPLAYERSCUSTOM][3];
new bool:SuicideEffects[MAXPLAYERSCUSTOM];
new SuicideTeam[MAXPLAYERSCUSTOM];
new Float:SuicideRadius[MAXPLAYERSCUSTOM];
new SuicideSkillID[MAXPLAYERSCUSTOM];
new Float:SuicideDamage[MAXPLAYERSCUSTOM];

/*
new ClientTracer;
new Float:emptypos[3];
new Float:oldpos[MAXPLAYERSCUSTOM][3];
new Float:teleportpos[MAXPLAYERSCUSTOM][3];
new bool:inteleportcheck[MAXPLAYERSCUSTOM];


new String:teleportSound[]="war3source/blinkarrival.wav";
*/

public Plugin:myinfo = 
{
	name = "SkillCraft WCX - Skills Engine",
	author = "SkillCraft Team",
	description = "Provides natives for use with SC mod",
	version = "0.1",
}

public OnPluginStart()
{
	//LoadTranslations("w3s.race.humanally.phrases");
	//LoadTranslations("w3s.race.undead.phrases");
}

public OnMapStart()
{
	strcopy(explosionSound1,sizeof(explosionSound1),"war3source/particle_suck1.mp3");

	ExplosionModel=PrecacheModel("materials/particles/explosion/explosionfiresmoke.vmt",false);
	PrecacheSound("weapons/explode1.wav",false);

	BeamSprite=SC_PrecacheBeamSprite();
	HaloSprite=SC_PrecacheHaloSprite();

	SC_PrecacheSound(explosionSound1);
	
//	SC_PrecacheSound(teleportSound);
}
public OnWar3EventSpawn(client)
{
	SuicidedAsTeam[client] = GetClientTeam(client);
}

public bool:Init_SC_NativesForwards()
{
	CreateNative("SC_SuicideBomber",Native_SC_SuicideBomber);
	//CreateNative("SC_Teleport",Native_SC_Teleport);
	return true;
}


//Suicide Bomber

public Native_SC_SuicideBomber(Handle:plugin,numParams)
{
	new client = GetNativeCell(1);
	if(SuicidedAsTeam[client]!=GetClientTeam(client))
		return;
	
	SuicideTeam[client] = GetClientTeam(client);
	GetNativeArray(2,SuicideLocation[client],3);
	SuicideDamage[client] = Float:GetNativeCell(3);
	SuicideSkillID[client] = GetNativeCell(4);
	SuicideRadius[client] = Float:GetNativeCell(5);
	SuicideEffects[client] = bool:GetNativeCell(6);
	
	CreateTimer(0.10,SuicideAction,client);
}

public Action:SuicideAction(Handle:timer,any:client)
{
	if(ValidPlayer(client))
	{
		new Float:radius = SuicideRadius[client];
		new our_team = SuicideTeam[client];

		if(SuicideEffects[client])
		{
			TE_SetupExplosion(SuicideLocation[client],ExplosionModel,10.0,1,0,RoundToFloor(radius),160);
			TE_SendToAll();

			ThrowAwayParticle("ExplosionCore_buildings", SuicideLocation[client],  5.0);
			ThrowAwayParticle("ExplosionCore_MidAir", SuicideLocation[client],  5.0);
			ThrowAwayParticle("ExplosionCore_MidAir_underwater", SuicideLocation[client],  5.0);
			ThrowAwayParticle("ExplosionCore_sapperdestroyed", SuicideLocation[client],  5.0);
			ThrowAwayParticle("ExplosionCore_Wall", SuicideLocation[client],  5.0);
			ThrowAwayParticle("ExplosionCore_Wall_underwater", SuicideLocation[client],  5.0);

			TE_SetupBeamRingPoint(SuicideLocation[client], 10.0, radius, BeamSprite, HaloSprite, 0, 15, 0.5, 10.0, 10.0, {255,255,255,33}, 120, 0);
			TE_SendToAll();
			
			new beamcolor[]={0,200,255,255}; //blue //secondary ring
			if(our_team==2 || SuicideSkillID[client] == -1)
			{ //TERRORISTS/RED in TF?
				beamcolor[0]=255;
				beamcolor[1]=0;
				beamcolor[2]=0;
				
			} //secondary ring
			TE_SetupBeamRingPoint(SuicideLocation[client], 20.0, radius+10.0, BeamSprite, HaloSprite, 0, 15, 0.5, 10.0, 10.0, beamcolor, 120, 0);
			TE_SendToAll();
			
			SuicideLocation[client][2]-=30.0;

			EmitSoundToAll(explosionSound1,client);
			
			EmitSoundToAll("weapons/explode1.wav",client);
		}
		new bool:friendlyfire = GetConVarBool(FindConVar("mp_friendlyfire"));
		new Float:location_check[3];
		for(new x=1;x<=MaxClients;x++)
		{
			if(ValidPlayer(x,true)&&client!=x)
			{
				new team=GetClientTeam(x);
				if(team==our_team&&!friendlyfire)
					continue;
				
				GetClientAbsOrigin(x,location_check);
				new Float:distance=GetVectorDistance(SuicideLocation[client],location_check);
				if(distance>radius)
					continue;
				
				if(!SC_HasImmunity(x,Immunity_Ultimates))
				{
					new Float:factor=(radius-distance)/radius;
					new damage;
					damage=RoundFloat(SuicideDamage[client]*factor);
					SC_DealDamage(x,damage,client,_,"suicidebomber",SC_DMGORIGIN_ULTIMATE,SC_DMGTYPE_PHYSICAL);	
					new String:buffer[512];
					GetClientName(x, buffer, sizeof(buffer));
					PrintToConsole(client,"Dealt %i damage to %s",damage,buffer);
					SC_ChatMessage(client,"(Damage) %i to %s!",damage,buffer);
					SC_ShakeScreen(x,3.0*factor,250.0*factor,30.0);
					SC_FlashScreen(x,RGBA_COLOR_RED);
				}
				else
				{
					new String:buffer[512];
					GetClientName(x, buffer, sizeof(buffer));
					SC_ChatMessage(client,"(Damage) %s was immune!",buffer);
					PrintToConsole(client,"Could not damage player %s due to immunity",x);
				}
				
			}
		}
	}
}




